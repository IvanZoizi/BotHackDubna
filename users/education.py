from random import shuffle

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards import *
from states import NewStates
from databases import DataBase

router = Router()


@router.callback_query(F.data == 'education')
async def start_education(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_education_kb())


@router.callback_query(F.data == 'school')
async def school(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(NewStates.name)
    await call.message.delete()
    await call.message.answer("üßí –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ —à–∫–æ–ª—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")


@router.message(StateFilter(NewStates.name))
async def school_name(message: types.Message, state: FSMContext):
    surname, name, fatherhood = message.text.split()
    await state.update_data(name=name, surname=surname, fatherhood=fatherhood)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞")
    await state.set_state(NewStates.year)


@router.message(StateFilter(NewStates.year))
async def school_year(message: types.Message, state: FSMContext):
    await state.update_data(year=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —à–∫–æ–ª—É, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ–π–¥–µ—Ç –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫", reply_markup=choice_school_kb())
    await state.set_state(NewStates.choose_school)


@router.callback_query(StateFilter(NewStates.choose_school))
async def school_choose(call: types.CallbackQuery, state: FSMContext, dbase: DataBase):
    dict_edu = {'lyceum': '–õ–∏—Ü–µ–π', 'mou': '–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ', 'gim': '–ì–∏–º–Ω–∞–∑–∏—è'}
    data = await state.get_data()
    await state.clear()
    check = dbase.get_educational_user(data['name'], data['surname'])
    if not check:
        await call.message.answer("<b>–í—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>",
                             reply_markup=back_kb(), parse_mode='html')
    dbase.new_educational_user(call.from_user.id, data['name'], data['surname'], data['fatherhood'], data['year'],
                               dict_edu[call.data])
    await call.message.answer("<b>–°–∫–æ—Ä–æ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –≤–∞–º —à–∫–æ–ª—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!</b>", parse_mode='html', reply_markup=back_kb())


@router.callback_query(F.data == 'past_education')
async def past_education(call: types.CallbackQuery, dbase: DataBase):
    users = dbase.get_educational_user_data(call.from_user.id)
    if not users:
        await call.message.answer("<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π</b>", parse_mode='html',
                                  reply_markup=back_kb())
    else:
        emodsi = ['üëßüèª', 'üßí', 'üëß', 'üßíüèª']
        shuffle(emodsi)
        text = '<b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n\n'
        for i in range(len(users)):
            child = users[i]
            text += f"{emodsi[i % len(emodsi)]} <b>{child[2]} {child[1]} {child[3]}</b>, {child[4]}, {child[5]}\n\n"

        await call.message.answer(text, parse_mode='html', reply_markup=back_kb())

