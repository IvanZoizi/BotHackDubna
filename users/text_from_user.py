import asyncio
from random import shuffle

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards import *
from states import SchoolStates, KindStates, PolicyStates
from databases import DataBase
from gpt import gpt_request
from promts import *


router = Router()


@router.message(F.text, StateFilter(None))
async def start_answer_user(message: types.Message, state: FSMContext, dbase: DataBase):
    await state.clear()
    text = gpt_request(message.text, promt_start)
    print(text)
    if 'school' in text:
        data = text.split(',')
        if len(data) == 1:
            await state.set_state(SchoolStates.name)
            await message.answer("üßí –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ —à–∫–æ–ª—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
        else:
            if 'None' not in data[1] and 'None' not in data[2]:
                name, surname, fatherhood = data[1].split()
                await state.update_data(name=name, surname=surname, fatherhood=fatherhood, year=data[2].strip())
                await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —à–∫–æ–ª—É, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ–π–¥–µ—Ç –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫",
                                     reply_markup=choice_school_kb())
                await state.set_state(SchoolStates.choose_school)
            elif 'None' in data[1] and 'None' not in data[2]:
                await state.update_data(year=data[2].strip())
                await state.set_state(SchoolStates.name)
                await message.answer("üßí –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ —à–∫–æ–ª—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
            elif 'None' not in data[1] and 'None' in data[2]:
                name, surname, fatherhood = data[1].split()
                await state.update_data(name=name, surname=surname, fatherhood=fatherhood)
                await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞")
                await state.set_state(SchoolStates.year)
    elif 'kindergarten' in text:
        data = text.split(',')
        if len(data) == 1:
            await state.set_state(KindStates.name)
            await message.answer("üßí –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ —à–∫–æ–ª—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
        else:
            if 'None' not in data[1] and 'None' not in data[2]:
                name, surname, fatherhood = data[1].split()
                check = dbase.get_educational_user(name, surname)
                if not check:
                    await message.answer("<b>–í—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>",
                                         reply_markup=back_kb(), parse_mode='html')
                dbase.new_educational_user(message.from_user.id, name, surname, fatherhood,
                                           data[2],
                                           '–î–µ—Ç—Å–∫–∏–π —Å–∞–¥')
                await message.answer("<b>–°–∫–æ—Ä–æ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –≤–∞–º –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!</b>", parse_mode='html',
                                     reply_markup=back_kb())
            elif 'None' in data[1] and 'None' not in data[2]:
                await state.update_data(year=data[2].strip())
                await state.set_state(KindStates.name)
                await message.answer("üßí –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ —à–∫–æ–ª—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
            elif 'None' not in data[1] and 'None' in data[2]:
                name, surname, fatherhood = data[1].split()
                await state.update_data(name=name, surname=surname, fatherhood=fatherhood)
                await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞")
                await state.set_state(KindStates.year)
    elif text == 'past_education':
        users = dbase.get_educational_user_data(message.from_user.id)
        if not users:
            await message.answer("<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π</b>", parse_mode='html',
                                      reply_markup=back_kb())
        else:
            emodsi = ['üëßüèª', 'üßí', 'üëß', 'üßíüèª']
            shuffle(emodsi)
            text = '<b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n\n'
            for i in range(len(users)):
                child = users[i]
                text += f"{emodsi[i % len(emodsi)]} <b>{child[2]} {child[1]} {child[3]}</b>, {child[4]}, {child[5]}\n\n"

            await message.answer(text, parse_mode='html', reply_markup=back_kb())
    elif text == 'education':
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_education_kb())
    elif text == 'doctors':
        await message.answer('...', reply_markup=start_doctors_kb())
    elif text == 'policy':
        policy = dbase.get_policy(message.from_user.id)
        if policy:
            await message.answer(f"<b>–í–∞—à –∫–æ–¥ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∏—Å–∞ - {policy[2]}</b>", reply_markup=back_kb(),
                                      parse_mode='html')
        else:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–ª–∏—Å, –≤ –≤–∏–¥–µ –µ–≥–æ –∫–æ–¥")
            await state.set_state(PolicyStates.code)
    elif text == 'communal_services':
        await message.answer('...', reply_markup=start_communal_services_kb())
    elif text == 'avto':
        await message.answer('...', reply_markup=start_avto_kb())
    elif text == 'does_not_work':
        await message.answer("<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω</b>", reply_markup=back_kb(), parse_mode='html')
    else:
        await message.answer("–í–æ–∑–º–æ–∂–Ω–æ —è –Ω–µ —Å–º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å –¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–∫–æ—Ä–æ –∫ –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º",
                             reply_markup=back_kb())

