from random import shuffle

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards import *
from states import NewStates
from databases import DataBase
from gpt import gpt_request
from promts import *

router = Router()


@router.message(F.text, StateFilter(None))
async def start_answer_user(message: types.Message, state: FSMContext):
    await state.clear()
    text = gpt_request(message.text, promt_start)
    print(text)
    if text == 'school':
        await state.set_state(NewStates.name)
        await message.answer("üßí –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞ –≤ —à–∫–æ–ª—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
    elif text == 'past_education':
        pass
    elif text == 'education':
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_education_kb())
    elif text == 'doctors':
        await message.answer('...', reply_markup=start_doctors_kb())
    elif text == 'communal_services':
        await message.answer('...', reply_markup=start_communal_services_kb())
    elif text == 'avto':
        await message.answer('...', reply_markup=start_avto_kb())
    else:
        await message.answer("–í–æ–∑–º–æ–∂–Ω–æ —è –Ω–µ —Å–º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å –¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–∫–æ—Ä–æ –∫ –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º",
                             reply_markup=back_kb())

